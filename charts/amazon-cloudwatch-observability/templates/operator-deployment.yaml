{{- if and (.Values.agent.autoGenerateCert.enabled) (not .Values.agent.certManager.enabled) -}}
{{- $appsignalsAltNames := list ( printf "%s-service" (include "cloudwatch-agent.name" .) ) ( printf "%s-service.%s.svc" (include "cloudwatch-agent.name" .) .Release.Namespace )  -}}
{{- $ca := genCA ("agent-ca")  ( .Values.agent.autoGenerateCert.expiryDays | int ) -}}
{{- $appsingalsCert := genSignedCert ("agent") nil $appsignalsAltNames ( .Values.agent.autoGenerateCert.expiryDays | int ) $ca -}}
apiVersion: v1
kind: Secret
metadata:
  labels:
      {{- include "amazon-cloudwatch-observability.labels" . | nindent 4}}
  name: "amazon-cloudwatch-app-signals-cert"
  namespace: {{ .Release.Namespace }}
data:
  ca.crt: {{ $ca.Cert | b64enc }}
  tls.crt: {{ $appsingalsCert.Cert | b64enc }}
  tls.key: {{ $appsingalsCert.Key | b64enc }}
---
{{- end -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    {{- include "amazon-cloudwatch-observability.labels" . | nindent 4 }}
    control-plane: controller-manager
  name: {{ template "amazon-cloudwatch-observability.name" . }}-controller-manager
  namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ template "amazon-cloudwatch-observability.name" . }}
      control-plane: controller-manager
  template:
    metadata:
      annotations:
        {{- if .Values.manager.podAnnotations }}
        {{- include "amazon-cloudwatch-observability.podAnnotations" . | nindent 8 }}
        {{- end }}
      labels:
        app.kubernetes.io/name: {{ template "amazon-cloudwatch-observability.name" . }}
        control-plane: controller-manager
        {{- include "amazon-cloudwatch-observability.podLabels" . | nindent 8 }}
    spec:
      containers:
      - image: {{ template "cloudwatch-agent-operator.image" . }}
        args:
        - {{ printf "--auto-annotation-config=%s" (.Values.manager.autoAnnotateAutoInstrumentation | toJson) | quote }}
        - "--auto-instrumentation-java-image={{ template "auto-instrumentation-java.image" . }}"
        - "--auto-instrumentation-python-image={{ template "auto-instrumentation-python.image" . }}"
        - "--feature-gates=operator.autoinstrumentation.multi-instrumentation,operator.autoinstrumentation.multi-instrumentation.skip-container-validation"
        command:
        - /manager
        name: manager
        ports:
        - containerPort: {{ .Values.manager.ports.containerPort }}
          name: webhook-server
          protocol: TCP
        resources: {{ toYaml .Values.manager.resources | nindent 12 }}
        volumeMounts:
        - mountPath: /tmp/k8s-webhook-server/serving-certs
          name: cert
          readOnly: true
        - mountPath: /etc/amazon-cloudwatch-app-signals-cert
          name: appsignaltls
          readOnly: true
      serviceAccountName: {{ template "amazon-cloudwatch-observability.managerServiceAccountName" . }}
      terminationGracePeriodSeconds: 10
      volumes:
      - name: cert
        secret:
          defaultMode: 420
          secretName: {{ template "amazon-cloudwatch-observability.certificateSecretName" . }}
      - name: appsignaltls
        secret:
          secretName: amazon-cloudwatch-app-signals-cert
          items:
            - key: ca.crt
              path: tls-ca.crt
      nodeSelector:
        kubernetes.io/os: linux
