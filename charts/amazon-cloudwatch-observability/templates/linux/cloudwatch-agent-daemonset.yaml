{{- if .Values.agent.enabled }}
{{- range $i, $customAgent := .Values.agentWorkloads }}
{{- if and ($.Values.agent.autoGenerateCert.enabled) (not $.Values.agent.certManager.enabled) -}}
{{- $altNames := list ( printf "%s-service" (include "dcgm-exporter.name" $) ) ( printf "%s-service" (include "neuron-monitor.name" $) ) ( printf "%s-service.%s.svc" (include "dcgm-exporter.name" $) $.Release.Namespace ) ( printf "%s-service.%s.svc" (include "neuron-monitor.name" $) $.Release.Namespace ) -}}
{{- $ca := genCA ("agent-ca")  ( $.Values.agent.autoGenerateCert.expiryDays | int ) -}}
{{- $cert := genSignedCert ("agent") nil $altNames ( $.Values.admissionWebhooks.autoGenerateCert.expiryDays | int ) $ca -}}
apiVersion: v1
kind: Secret
metadata:
  labels:
      {{- include "amazon-cloudwatch-observability.labels" $ | nindent 4}}
  name: "amazon-cloudwatch-observability-agent-cert"
  namespace: {{ $.Release.Namespace }}
data:
  ca.crt: {{ $ca.Cert | b64enc }}
  tls.crt: {{ $cert.Cert | b64enc }}
  tls.key: {{ $cert.Key | b64enc }}
---
{{- end -}}

{{- $clusterName := $.Values.clusterName | required "$.Values.clusterName is required." -}}
{{- $region := $.Values.region | required "$.Values.region is required." -}}
apiVersion: cloudwatch.aws.amazon.com/v1alpha1
kind: AmazonCloudWatchAgent
metadata:
  name: {{ $customAgent.name | default (include "cloudwatch-agent.name" $) }}
  namespace: {{ $.Release.Namespace }}
spec:
  image: {{ include "cloudwatch-agent.modify-image" (merge (dict "Image" $customAgent.image) $ ) }}
  mode: {{ $customAgent.mode | default "daemonset" }}
  nodeSelector:
    kubernetes.io/os: linux
  serviceAccount: {{ $customAgent.serviceAccount.name | default (include "cloudwatch-agent.serviceAccountName" $) }}
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: {{ $.Values.fargateLabelKey }}
                operator: NotIn
                values:
                  - fargate
  hostNetwork: true
  {{- if $customAgent.config }}
  config: {{ include "cloudwatch-agent.modify-config" (merge (dict "Config" $customAgent.config) $ ) }}
  {{- else }}
  config: {{ include "cloudwatch-agent.modify-config" (merge (dict "Config" $.Values.agent.defaultConfig) $ ) }}
  {{- end }}
  resources:
    requests:
      memory: {{ $customAgent.resources.requests.memory | default $.Values.agent.resources.requests.memory }}
      cpu: {{ $customAgent.resources.requests.cpu | default default $.Values.agent.resources.requests.cpu }}
    limits:
      memory: {{ $customAgent.resources.limits.memory | default default $.Values.agent.resources.limits.memory }}
      cpu: {{ $customAgent.resources.limits.cpu | default default $.Values.agent.resources.limits.cpu }}
  volumeMounts:
  - mountPath: /rootfs
    name: rootfs
    readOnly: true
  - mountPath: /var/run/docker.sock
    name: dockersock
    readOnly: true
  - mountPath: /run/containerd/containerd.sock
    name: containerdsock
  - mountPath: /var/lib/docker
    name: varlibdocker
    readOnly: true
  - mountPath: /sys
    name: sys
    readOnly: true
  - mountPath: /dev/disk
    name: devdisk
    readOnly: true
  - mountPath: /etc/amazon-cloudwatch-observability-agent-cert
    name: agenttls
    readOnly: true
  - mountPath: /var/lib/kubelet/pod-resources
    name: kubelet-podresources
  volumes:
  - name: kubelet-podresources
    hostPath:
      path: /var/lib/kubelet/pod-resources
      type: Directory
  - name: rootfs
    hostPath:
      path: /
  - hostPath:
      path: /var/run/docker.sock
    name: dockersock
  - hostPath:
      path: /var/lib/docker
    name: varlibdocker
  - hostPath:
      path: /run/containerd/containerd.sock
    name: containerdsock
  - hostPath:
      path: /sys
    name: sys
  - hostPath:
      path: /dev/disk/
    name: devdisk
  - name: agenttls
    secret:
      secretName: amazon-cloudwatch-observability-agent-cert
      items:
        - key: ca.crt
          path: tls-ca.crt
  env:
  - name: K8S_NODE_NAME
    valueFrom:
      fieldRef:
        fieldPath: spec.nodeName
  - name: HOST_IP
    valueFrom:
      fieldRef:
        fieldPath: status.hostIP
  - name: HOST_NAME
    valueFrom:
      fieldRef:
        fieldPath: spec.nodeName
  - name: K8S_NAMESPACE
    valueFrom:
      fieldRef:
        fieldPath: metadata.namespace
  {{- with $.Values.tolerations }}
  tolerations: {{- toYaml . | nindent 2}}
  {{- end }}
---
{{- end }}
{{- end }}