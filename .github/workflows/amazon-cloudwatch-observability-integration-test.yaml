# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

name: Integration Test for Amazon CloudWatch Observability
on:
  push:
    branches:
      - main
  pull_request:
    types: [ opened, reopened, synchronize, ready_for_review ]
    branches:
      - main
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read

env:
  TERRAFORM_AWS_ASSUME_ROLE: ${{ secrets.TERRAFORM_AWS_ASSUME_ROLE }}
  AWS_DEFAULT_REGION: us-west-2

jobs:
  Build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: make all

  Minikube-IntegrationTests:
    name: Minikube
    needs: [ Build ]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        # TODO: add webhooks-disabled
        scenario: [default, appsignals-disabled, appsignals-disabled-multi-agents, appsignals-enabled-multi-agents, webhooks-partially-enabled, webhooks-configured]
    steps:
      - uses: actions/checkout@v3

      - name: Start minikube
        uses: medyagh/setup-minikube@master
        with:
          driver: docker

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.1.7"

      - name: Run scenario test
        run: |
          cd integration-tests/amazon-cloudwatch-observability/terraform/minikube/scenarios/${{ matrix.scenario }}
          terraform init
          terraform apply -auto-approve
          terraform destroy -auto-approve

      - name: Cleanup on failure
        if: ${{ cancelled() || failure() }}
        run: |
          cd integration-tests/amazon-cloudwatch-observability/terraform/minikube/scenarios/${{ matrix.scenario }}
          terraform destroy -auto-approve || true

  EKS-IntegrationTest:
    name: EKS-IntegrationTest
    needs: [ Minikube-IntegrationTests ]
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Generate testing id
        run: echo TESTING_ID="${{ github.run_id }}-${{ github.run_number }}" >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.TERRAFORM_AWS_ASSUME_ROLE }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      #  local directory to store the kubernetes config
      - name: Create kubeconfig directory
        run: mkdir -p ${{ github.workspace }}/../../../.kube

      - name: Set KUBECONFIG environment variable
        run: echo KUBECONFIG="${{ github.workspace }}/../../../.kube/config" >> $GITHUB_ENV

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.1.7"

      - name: Verify Terraform version
        run: terraform --version

      - name: Terraform apply
        uses: nick-fields/retry@v2
        with:
          max_attempts: 1
          timeout_minutes: 60 # EKS takes about 20 minutes to spin up a cluster and service on the cluster
          retry_wait_seconds: 5
          command: |
            cd integration-tests/amazon-cloudwatch-observability/terraform/eks
            terraform init
            if terraform apply -auto-approve \
                -var="kube_dir=${{ github.workspace }}/../../../.kube"; then
              terraform destroy -auto-approve
            else
              terraform destroy -auto-approve && exit 1
            fi

      - name: Terraform destroy
        if: ${{ cancelled() || failure() }}
        uses: nick-fields/retry@v2
        with:
          max_attempts: 3
          timeout_minutes: 8
          retry_wait_seconds: 5
          command: |
            cd integration-tests/amazon-cloudwatch-observability/terraform/eks
            terraform destroy --auto-approve

  EKS-IntegrationTest-Win2022:
    name: EKS-IntegrationTest-Win2022
    needs: [ Minikube-IntegrationTests ]
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Generate testing id
        run: echo TESTING_ID="${{ github.run_id }}-${{ github.run_number }}" >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.TERRAFORM_AWS_ASSUME_ROLE }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      #  local directory to store the kubernetes config
      - name: Create kubeconfig directory
        run: mkdir -p ${{ github.workspace }}/../../../.kube

      - name: Set KUBECONFIG environment variable
        run: echo KUBECONFIG="${{ github.workspace }}/../../../.kube/config" >> $GITHUB_ENV

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.1.7"

      - name: Verify Terraform version
        run: terraform --version

      - name: Terraform apply
        uses: nick-fields/retry@v2
        with:
          max_attempts: 1
          timeout_minutes: 60 # EKS takes about 20 minutes to spin up a cluster and service on the cluster
          retry_wait_seconds: 5
          command: |
            cd integration-tests/amazon-cloudwatch-observability/terraform/eks/windows
            terraform init
            if terraform apply -auto-approve \
                -var="windows_os_version=WINDOWS_CORE_2022_x86_64" -var="kube_dir=${{ github.workspace }}/../../../.kube"; then
              terraform destroy -auto-approve
            else
              terraform destroy -auto-approve && exit 1
            fi

      - name: Terraform destroy
        if: ${{ cancelled() || failure() }}
        uses: nick-fields/retry@v2
        with:
          max_attempts: 3
          timeout_minutes: 8
          retry_wait_seconds: 5
          command: |
            cd integration-tests/amazon-cloudwatch-observability/terraform/eks/windows
            terraform destroy --auto-approve

  EKS-IntegrationTest-Win2019:
    name: EKS-IntegrationTest-Win2019
    needs: [ Minikube-IntegrationTests ]
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Generate testing id
        run: echo TESTING_ID="${{ github.run_id }}-${{ github.run_number }}" >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.TERRAFORM_AWS_ASSUME_ROLE }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      #  local directory to store the kubernetes config
      - name: Create kubeconfig directory
        run: mkdir -p ${{ github.workspace }}/../../../.kube

      - name: Set KUBECONFIG environment variable
        run: echo KUBECONFIG="${{ github.workspace }}/../../../.kube/config" >> $GITHUB_ENV

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.1.7"

      - name: Verify Terraform version
        run: terraform --version

      - name: Terraform apply
        uses: nick-fields/retry@v2
        with:
          max_attempts: 1
          timeout_minutes: 60 # EKS takes about 20 minutes to spin up a cluster and service on the cluster
          retry_wait_seconds: 5
          command: |
            cd integration-tests/amazon-cloudwatch-observability/terraform/eks/windows
            terraform init
            if terraform apply -auto-approve \
                -var="windows_os_version=WINDOWS_CORE_2019_x86_64" -var="kube_dir=${{ github.workspace }}/../../../.kube"; then
              terraform destroy -auto-approve
            else
              terraform destroy -auto-approve && exit 1
            fi

      - name: Terraform destroy
        if: ${{ cancelled() || failure() }}
        uses: nick-fields/retry@v2
        with:
          max_attempts: 3
          timeout_minutes: 8
          retry_wait_seconds: 5
          command: |
            cd integration-tests/amazon-cloudwatch-observability/terraform/eks/windows
            terraform destroy --auto-approve
